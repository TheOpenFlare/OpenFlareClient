<Window x:Class="OpenFlareClient.OF_MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:OpenFlareClient"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        mc:Ignorable="d"
        Title="OpenFlare Client" Height="591.912" Width="329.411" Icon="{DynamicResource OpenFlareIcon}" Loaded="Window_Loaded" Closing="Window_Closing" Style="{DynamicResource MyWindowStyle}">
        <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CanExecute" Executed="CloseWindow" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" CanExecute="CanResizeWindow" Executed="MaximizeWindow" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" CanExecute="CanMinimizeWindow" Executed="MinimizeWindow" />
        <CommandBinding Command="{x:Static SystemCommands.RestoreWindowCommand}" CanExecute="CanResizeWindow" Executed="RestoreWindow" />
    </Window.CommandBindings>
    <Window.Resources>
        <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#FFBB2121"/>
        <Style TargetType="{x:Type TabControl}">
            <Setter Property="Padding" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}"/>
            <Setter Property="BorderThickness" Value="0,8,0,0"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"/>
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                <RowDefinition x:Name="RowDefinition1" Height="*"/>
                            </Grid.RowDefinitions>
                            <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border Margin="0,0,-4,0" x:Name="Border" Background="#FF4D4D4D" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,12,0,0">
                                <ContentPresenter HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100"/>
                                <Setter Property="Background" Value="#666666 " TargetName="Border"/>
                                <Setter Property="BorderThickness" Value="1,1,1,0" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="FriendsListTemplate">
            <Grid>
                <Grid.ContextMenu>
                    <ContextMenu>
                        <MenuItem x:Name="OF_MenuList_Remove_Friend" Tag="{Binding Jid}" Header="Remove" Click="OF_MenuList_Remove_Friend_Click"/>
                        <MenuItem x:Name="OF_MenuList_Accept_Friend" Tag="{Binding Jid}" Header="Accept" Click="OF_MenuList_Accept_Friend_Click" IsEnabled="{Binding Pending}"/>
                        <MenuItem x:Name="OF_MenuList_SendFile" Tag="{Binding Jid}" Header="Send File"/>
                    </ContextMenu>
                </Grid.ContextMenu>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Image Height="70" Width="70" Source="{Binding Avatar}" />
                <StackPanel Grid.Column="1">
                    <Label Height="Auto" Content="{Binding Name}"/>
                    <Label Height="Auto" Content="{Binding Status}" Background="#FF0068FF" HorizontalContentAlignment="Center" />
                    <Label Height="Auto" Content="{Binding StatusMessage}" Background="#CD0068FF" BorderBrush="#FF0068FF" BorderThickness="5"/>
                </StackPanel>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="GroupListTemplate">
            <Grid>
                <Label Height="Auto" Content="{Binding Name}"/>
            </Grid>
        </DataTemplate>
        <SolidColorBrush x:Key="Menu.Static.Background" Color="#666666"/>
        <Style TargetType="{x:Type Menu}">
            <Setter Property="Background" Value="{StaticResource Menu.Static.Background}"/>
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#666666" />
        <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#666666" />
        <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#666666" />
        <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#666666" />
        <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="2" Name="Border" BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" CornerRadius="0" BorderThickness="1, 1, 1, 1" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
                <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder" CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
                <Path Name="Arrow" Grid.Column="1" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" HorizontalAlignment="Center" Fill="#444" VerticalAlignment="Center" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="#808080"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="#808080"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="False">
                    <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                    <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                    <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="False" IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Template="{StaticResource ComboBoxToggleButtonTemplate}" Background="Gray"/>
                            <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                            <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3" IsReadOnly="{TemplateBinding IsReadOnly}" Visibility="Hidden" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" >
                                <TextBox.Template>
                                    <ControlTemplate TargetType="TextBox" >
                                        <Border Name="PART_ContentHost" Focusable="False" />
                                    </ControlTemplate>
                                </TextBox.Template>
                            </TextBox>
                            <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" PopupAnimation="Slide">
                                <Grid Name="DropDown" SnapsToDevicePixels="True"  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                    <Border Name="DropDownBorder" Background="#666666" Margin="0, 1, 0, 0" CornerRadius="0" BorderThickness="1,1,1,1" BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="OF_MenuItemControlTemplate" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                    <Path x:Name="GlyphPanel" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                    <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                        <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="#666666" Padding="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                    </Canvas>
                                    <!--Rectangle Fill="#FFD7D7D7" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/-->
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="#3D26A0DA"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF26A0DA"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                    <Setter Property="Fill" TargetName="GlyphPanel" Value="#FF707070"/>
                </Trigger>
                <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="ContextMenu">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            <Setter Property="HasDropShadow" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border Name="Border" Background="#666666" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1" >
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                        <ControlTemplate.Triggers>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                <Grid>
                    <AdornerDecorator>
                        <ContentPresenter/>
                    </AdornerDecorator>
                    <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                        <Condition Property="WindowState" Value="Normal"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />

        <Color x:Key="WindowBackgroundColor">#FF2D2D30</Color>
        <Color x:Key="HighlightColor">#FF3F3F41</Color>
        <Color x:Key="BlueColor">#FF007ACC</Color>
        <Color x:Key="ForegroundColor">#FFF4F4F5</Color>

        <SolidColorBrush x:Key="WindowBackgroundColorBrush" Color="{StaticResource WindowBackgroundColor}"/>
        <SolidColorBrush x:Key="HighlightColorBrush" Color="{StaticResource HighlightColor}"/>
        <SolidColorBrush x:Key="BlueColorBrush" Color="{StaticResource BlueColor}"/>
        <SolidColorBrush x:Key="ForegroundColorBrush" Color="{StaticResource ForegroundColor}"/>

        <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource HighlightColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource BlueColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MyWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
            <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
            <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
            <Setter Property="UseLayoutRounding" Value="True" />
            <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border x:Name="WindowBorder" Margin="{Binding Source={x:Static SystemParameters.WindowNonClientFrameThickness}}" Background="{StaticResource WindowBackgroundColorBrush}">
                            <Grid>
                                <Border BorderThickness="1">
                                    <AdornerDecorator>
                                        <Grid x:Name="LayoutRoot">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="25" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="15" />
                                            </Grid.RowDefinitions>
                                            <ContentPresenter Grid.Row="1" Grid.RowSpan="2" Margin="7"/>
                                            <Rectangle x:Name="HeaderBackground" Height="25" Fill="{DynamicResource WindowBackgroundColorBrush}" VerticalAlignment="Top" Grid.Row="0"/>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0">
                                                <Button Command="{Binding Source={x:Static SystemCommands.MinimizeWindowCommand}}" ToolTip="minimize" Style="{StaticResource WindowButtonStyle}">
                                                    <Button.Content>
                                                        <Grid Width="30" Height="25" RenderTransform="1,0,0,1,0,1">
                                                            <Path Data="M0,6 L8,6 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                        </Grid>
                                                    </Button.Content>
                                                </Button>
                                                <Grid Margin="1,0,1,0">
                                                    <Button x:Name="Restore" Command="{Binding Source={x:Static SystemCommands.RestoreWindowCommand}}" ToolTip="restore" Visibility="Collapsed" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="30" Height="25" UseLayoutRounding="True" RenderTransform="1,0,0,1,.5,.5">
                                                                <Path Data="M2,0 L8,0 L8,6 M0,3 L6,3 M0,2 L6,2 L6,8 L0,8 Z" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                    <Button x:Name="Maximize" Command="{Binding Source={x:Static SystemCommands.MaximizeWindowCommand}}" ToolTip="maximize" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="31" Height="25">
                                                                <Path Data="M0,1 L9,1 L9,8 L0,8 Z" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                </Grid>
                                                <Button Command="{Binding Source={x:Static SystemCommands.CloseWindowCommand}}" ToolTip="close"  Style="{StaticResource WindowButtonStyle}">
                                                    <Button.Content>
                                                        <Grid Width="30" Height="25" RenderTransform="1,0,0,1,0,1">
                                                            <Path Data="M0,0 L8,7 M8,0 L0,7 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1.5"  />
                                                        </Grid>
                                                    </Button.Content>
                                                </Button>
                                            </StackPanel>
                                            <TextBlock x:Name="WindowTitleTextBlock" Grid.Row="0" Text="{TemplateBinding Title}" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"  Margin="8 -1 0 0"  FontSize="16"  Foreground="{TemplateBinding Foreground}"/>
                                            <Grid Grid.Row="2">
                                                <Path x:Name="ResizeGrip" Visibility="Collapsed" Width="12" Height="12" Margin="1" HorizontalAlignment="Right"
                                        Stroke="{StaticResource BlueColorBrush}" StrokeThickness="1" Stretch="None" Data="F1 M1,10 L3,10 M5,10 L7,10 M9,10 L11,10 M2,9 L2,11 M6,9 L6,11 M10,9 L10,11 M5,6 L7,6 M9,6 L11,6 M6,5 L6,7 M10,5 L10,7 M9,2 L11,2 M10,1 L10,3" />
                                            </Grid>
                                        </Grid>
                                    </AdornerDecorator>
                                </Border>
                                <Border BorderBrush="{StaticResource BlueColorBrush}" BorderThickness="1" Visibility="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource bool2VisibilityConverter}}" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WindowState" Value="Maximized">
                                <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="Restore" Property="Visibility" Value="Visible" />
                                <Setter TargetName="LayoutRoot" Property="Margin" Value="7" />
                            </Trigger>
                            <Trigger Property="WindowState" Value="Normal">
                                <Setter TargetName="Maximize" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Restore" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                    <Condition Property="WindowState" Value="Normal" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CornerRadius="0" GlassFrameThickness="1" UseAeroCaptionButtons="False" />
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Background="#FF333333">
        <Menu x:Name="menu" IsMainMenu="True" VerticalAlignment="Top">
            <Menu.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </Menu.ItemsPanel>
            <MenuItem Header="_File" Grid.Column="0" Template="{DynamicResource OF_MenuItemControlTemplate}">
                <MenuItem x:Name="OF_Menu_File_LogOut" Header="_Log Out" Click="OF_Menu_File_LogOut_Click" Template="{DynamicResource OF_MenuItemControlTemplate}"/>
                <MenuItem x:Name="OF_Menu_File_Exit" Header="_Exit" Click="ExitApp" Template="{DynamicResource OF_MenuItemControlTemplate}"/>
            </MenuItem>
            <MenuItem Header="_Options" Grid.Column="1" Template="{DynamicResource OF_MenuItemControlTemplate}">
                <MenuItem x:Name="OF_Menu_Options_Settings" Header="_Settings" Click="OF_Menu_Options_Settings_Click" Template="{DynamicResource OF_MenuItemControlTemplate}"/>
            </MenuItem>
            <MenuItem Header="_Add" HorizontalAlignment="Center" Grid.Column="2" Template="{DynamicResource OF_MenuItemControlTemplate}">
                <MenuItem x:Name="OF_Menu_Add_Friend" Header="_Friend" Click="OF_Menu_Add_Friend_Click" Template="{DynamicResource OF_MenuItemControlTemplate}"/>
            </MenuItem>
            <MenuItem Header="_Help"  HorizontalAlignment="Right" Grid.Column="3" Template="{DynamicResource OF_MenuItemControlTemplate}">
                <MenuItem x:Name="OF_Menu_Help_About" Header="_About" Click="OF_Menu_Help_About_Click" Template="{DynamicResource OF_MenuItemControlTemplate}"/>
            </MenuItem>
        </Menu>
        <tb:TaskbarIcon x:Name="OF_TaskbarIcon" ToolTipText="OpenFlare Client" IconSource="{DynamicResource OpenFlareIcon}" >
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem x:Name="OF_NIMenu_Settings" Header="Settings" Click="OpenSettings"/>
                    <MenuItem x:Name="OF_NIMenu_Exit" Header="Exit" Click="ExitApp"/>
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>
        <Grid Background="#FF7A7A7A" Width="{Binding Width, ElementName=OF_Avatar}" Height="{Binding Height, ElementName=OF_Avatar}" HorizontalAlignment="Left" Margin="0,23,0,0" VerticalAlignment="Top" d:LayoutOverrides="LeftMargin, RightMargin">
            <Image x:Name="OF_Avatar" Height="78" Width="81" Source="{Binding XmppClientData.Avatar, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}"/>
            <Grid.ContextMenu>
                <ContextMenu>
                    <MenuItem x:Name="OF_Menu_Set_Avatar" Header="Set" Click="OF_Menu_Set_Avatar_Click"/>
                </ContextMenu>
            </Grid.ContextMenu>
        </Grid>
        <ComboBox x:Name="OF_Status" VerticalContentAlignment="Center" Height="30" VerticalAlignment="Top" Margin="86,23,0,0" SelectionChanged="OF_Status_SelectionChanged" SelectedIndex="{Binding Settings.Status, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}">
            <ComboBoxItem Content="Offline"/>
            <ComboBoxItem Content="Online"/>
            <ComboBoxItem Content="Away"/>
            <ComboBoxItem Content="Chat"/>
            <ComboBoxItem Content="Dnd"/>
            <ComboBoxItem Content="Xa"/>
            <ComboBox.ContextMenu>
                <ContextMenu>
                    <MenuItem x:Name="OF_Menu_Set_Status" Header="Set" Click="OF_Menu_Set_Status_Click"/>
                </ContextMenu>
            </ComboBox.ContextMenu>
        </ComboBox>
        <Canvas Margin="86,58,0,0" Height="18" VerticalAlignment="Top"  ClipToBounds="True" Name="OF_StatusCanvas" >
            <TextBlock x:Name="OF_StatusText" Margin="81,58,0,0" TextWrapping="Wrap" VerticalAlignment="Top" LostFocus="OF_StatusText_LostFocus" Text="{Binding Settings.StatusMessage,IsAsync=True, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}" Height="18"/>
        </Canvas>
        <TabControl x:Name="OF_TabControl" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="0,106,0,0" Background="#FF333333">
            <TabItem x:Name="OF_Friends" Header="Friends">
                <Grid Background="#FFE5E5E5">
                    <ListView x:Name="OF_FriendsList" MouseDoubleClick="OF_FriendsList_MouseDoubleClick"
                    DataContext="{Binding BuddiesList, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}"
					ItemsSource="{Binding}" ItemTemplate="{DynamicResource FriendsListTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Background="#FF333333" BorderThickness="0">

                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListViewItem}">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                <Setter Property="ToolTip">
                                    <Setter.Value>
                                        <StackPanel Grid.Column="1">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Text="Jid: " FontWeight="Bold" Grid.Column="0"/>
                                                <TextBlock Text="{Binding Jid}" Grid.Column="1"/>
                                            </Grid>
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Text="Subscription State: " FontWeight="Bold" Grid.Column="0"/>
                                                <TextBlock Text="{Binding SubscriptionState}" Grid.Column="1"/>
                                            </Grid>
                                            <Grid Visibility="{Binding TuneTextVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="User Tune: " FontWeight="Bold" Grid.Column="0"/>
                                            </Grid>
                                            <Grid Visibility="{Binding TuneTextVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="Title: " FontWeight="Bold" Grid.Column="0" Margin="8,0,0,0"/>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="{Binding MyTune.Title}" Grid.Column="1"/>
                                            </Grid>
                                            <Grid Visibility="{Binding TuneTextVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="Artist: " FontWeight="Bold" Grid.Column="0" Margin="8,0,0,0"/>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="{Binding MyTune.Artist}" Grid.Column="1"/>
                                            </Grid>
                                            <Grid Visibility="{Binding TuneTextVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="Album: " FontWeight="Bold" Grid.Column="0" Margin="8,0,0,0"/>
                                                <TextBlock Visibility="{Binding TuneTextVisibility}" Text="{Binding MyTune.Source}" Grid.Column="1"/>
                                            </Grid>
                                        </StackPanel>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                    </ListView>
                </Grid>
            </TabItem>
            <TabItem x:Name="OF_Groups" Header="Groups">
                <Grid Background="#FFE5E5E5">
                    <ListView x:Name="OF_GroupsList" DataContext="{Binding AllGroupChats, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}"
					ItemsSource="{Binding AllGroupChats, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}" ItemTemplate="{DynamicResource GroupListTemplate}" MouseDoubleClick="OF_GroupsList_MouseDoubleClick" Background="#FF333333" BorderThickness="0"/>
                </Grid>
            </TabItem>
        </TabControl>
        <Canvas Margin="86,83,0,0" Height="18" VerticalAlignment="Top"  ClipToBounds="True" Name="OF_TuneCanvas" >
            <TextBlock x:Name="OF_TuneText" Margin="81,83,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Text="{Binding XmppClientData.TuneText, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}" Height="18" />
        </Canvas>
        <Grid x:Name="OF_Login_Screen" Background="#FF333333" Visibility="Hidden">
            <TextBox x:Name="OF_UserName" Height="23" Margin="10,198,10,0" TextWrapping="Wrap" VerticalAlignment="Top" Text="{Binding Settings.UserName, IsAsync=True, Mode=TwoWay, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}}" TextChanged="OF_UserName_TextChanged" Background="#FF666666" />
            <PasswordBox x:Name="OF_Password" Height="23" Margin="10,226,10,0" VerticalAlignment="Top" PasswordChanged="OF_Password_PasswordChanged" Background="#FF666666"/>
            <Button x:Name="OF_Login" Content="Login" Margin="179,254,10,0" VerticalAlignment="Top" Click="OF_Login_Click"/>
            <CheckBox x:Name="OF_AutoLogin" Content="Auto login" Margin="10,254,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Width="76" IsChecked="{Binding Settings.AutoConnect, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:OF_MainWindow}}, UpdateSourceTrigger=Default}" Click="OF_AutoLogin_Click" Background="#FF666666"/>
            <Label x:Name="OF_XMPPSTATUS" Content="" Margin="10,278,10,0" VerticalAlignment="Top" HorizontalContentAlignment="Center"/>
        </Grid>
    </Grid>
</Window>