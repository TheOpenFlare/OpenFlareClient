using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using OpenFlareClient.Properties;

using System.Threading;
 

using System.Reflection;
using System.Runtime.CompilerServices;
using Gat.Controls;
using System.Diagnostics;
using System.Windows.Interop;
using System.Runtime.InteropServices;
using System.Windows.Media.Animation;
using System.IO;

//using S22.Xmpp.Client;

namespace OpenFlareClient
{

    /// <summary>
    /// Interaction logic for OF_MainWindow.xaml
    /// </summary>
    public partial class OF_MainWindow : Window
    {
        ///<summary>
        /// This is simply where plugin stores data and loads them from.
        ///</summary>
        ///<returns>directory for the plugin's data and settings.</returns>
        private static string settingPath = @"Settings.json";


        ///<summary>
        /// This is a static member of the Settings.
        ///</summary>
        public static Settings iSettings { get; set; }

        ///<summary>
        /// Gets or sets the dataDir property.
        ///</summary>
        ///<value>Directory for the plugin's data and settings.</value>
        public static string SettingPath { get { return settingPath; } set { settingPath = value; } }

        ///<summary>
        /// Gets or sets the iSettings property.
        ///</summary>
        ///<value>Plugin Settings.</value>
        public Settings ISettings { get { return iSettings; } set { iSettings = value; } }

        public static System.Windows.Forms.ContextMenu CM;

     
        public Thread thread_xmpp_connect;
        public Thread thread_xmpp_load;

        private Xmpp.Chats<Xmpp.ChatData> AllChats { get; set; }
        private object _allchatsLock = new object();


        public Xmpp.GroupChats<Xmpp.GroupChatData> AllGroupChats { get; set; }

        public Xmpp.Buddies<Xmpp.BuddiesData> BuddiesList { get; set; }

        public Xmpp.ClientData XCD { get; set; }

 
        /// <summary>
        /// Xmpp Connection Resource
        /// </summary>
        private string _resource = "OpenFlareClient";

        /// <summary>
        /// Communication Timeout In milliseconds; Indicates a disconnection if timeout is reached
        /// Default value 30000 ms (30s)
        /// -1 Indicates no timeout
        /// </summary>
        public static int DefaultTimeOut = 20000;//20s

        /// <summary>
        /// The period with which ping messages are sent in msec, 10minX30sec
        /// </summary>
        private int _pingPeriod = 5000;//200s

        private int _pingPeriod2 = 2000;
        private Timer _pingTimer;

        private const string WINAMP_TITLE = "Winamp v1.x";
        private IntPtr _WinampWindow;

        public static System.Drawing.Icon Convert(BitmapImage bitmapImage)
        {
            var ms = new MemoryStream();
            var encoder = new PngBitmapEncoder(); // With this we also respect transparency.
            encoder.Frames.Add(BitmapFrame.Create(bitmapImage));
            encoder.Save(ms);
            var bmp = new System.Drawing.Bitmap(ms);
            return System.Drawing.Icon.FromHandle(bmp.GetHicon());
        }


        public OF_MainWindow()
        {
             
            Security.HWID.Value();
            iSettings = Settings.CreateNewSettings();
            iSettings.LoadSettings();

            Attribute attr = Assembly.GetExecutingAssembly().GetCustomAttribute(typeof(AssemblyProductAttribute));
            string name = attr != null ? ((AssemblyProductAttribute)attr).Product : "OpenFlare";
            string version = Assembly.GetExecutingAssembly().GetName().Version.ToString();

          

            XCD = new Xmpp.ClientData();
            AllGroupChats = new Xmpp.GroupChats<Xmpp.GroupChatData>();

            AllChats = new Xmpp.Chats<Xmpp.ChatData>();
            BindingOperations.EnableCollectionSynchronization(AllChats, _allchatsLock);

            BuddiesList = new Xmpp.Buddies<Xmpp.BuddiesData>();
            InitializeComponent();
            OF_Login_Screen.Visibility = Visibility.Visible;
            OF_Password.Password = iSettings.Password.UnsecureString();
           // AllChats.CollectionChanged += AllChats_CollectionChanged;
          thread_xmpp_connect = new Thread(Connect);
           // thread_xmpp_load = new Thread(xmpp_load);
           

            CreateXMPP();

          //  if (iSettings.AutoConnect == true)
          //  {
          //      OF_Login.IsEnabled = false;
          //      thread_xmpp_connect.SmartStart(Connect);


           // }



        }


        private void CreateXMPP()
        {
            try
            {
 
                
                
                

                //agsXMPP.Factory.ElementFactory.AddElementType("Login", null, typeof(Settings.Login));
                //   LoadChatServers();

            }
            catch (Exception ex) { MessageBox.Show("ErrorX: " + ex.Message); }


        }

   

        //private void XC_ErrorMessage(object sender, MessageEventArgs e)
        //{
        //    MessageBox.Show("ErrorMessage: " + e.Message);
        //}

        //private void XC_Error(object sender, Sharp.Xmpp.Im.ErrorEventArgs e)
        //{
        //    if (e.Exception.Message.Contains("XmppDisconnectionException"))
        //    {
        //        Dispose(true);
        //        SetXMPPSTATUS("Disconnected from server");
        //        thread_xmpp_connect.Abort();
        //    }


        //    MessageBox.Show("Error: " + e.Exception.Message);
        //}

        //private void XC_Tune(object sender, TuneEventArgs e)
        //{
        //    this.Dispatcher.Invoke((Action)(() =>
        //    {
        //        if (e.Jid.GetBareJid() != XCD.Jid.GetBareJid())
        //        {
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).myTune = e.Information;
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).TuneText = e.Information.Artist + " - " + e.Information.Title; ;
        //        }
        //    }));
        //    //MessageBox.Show("Artist: " + e.Information.Artist + Environment.NewLine + "Album: " + e.Information.Source + Environment.NewLine + "Title: " + e.Information.Title, "File: ");
        //}

        public void SetXMPPSTATUS(string content)
        {
            this.Dispatcher.Invoke((Action)(() =>
            {


                OF_XMPPSTATUS.Content = content;
                OF_XMPPSTATUS.Foreground = Brushes.Red;

            }));
        }

        public void SetLoginSCV(Visibility vss)
        {

            this.Dispatcher.Invoke((Action)(() =>
            {
                OF_Login_Screen.Visibility = vss;
            }));
        }
        //private string[] stringSeparators = new string[] { "<DATASEPARATOR>" };
        //private string oldTrack = "";
        //private string playerstatus = "";
        //private bool playingmusic = false;

        //private string xTitle = null;
        //private string xArtist = null;
        //private string xTrack = null;
        //private int xLength = 0;
        //private string xAlbum = null;

        //public IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        //{
        //    if (msg == Win32.WM_COPYDATA)
        //    {
        //        Win32.CopyDataStruct cp = (Win32.CopyDataStruct)Marshal.PtrToStructure(lParam, typeof(Win32.CopyDataStruct));
        //        TuneInformation tif = new TuneInformation(null, null, null, 0, 0, null, null);

        //        playerstatus = cp.lpData.Split(stringSeparators, StringSplitOptions.None)[1];
        //        if (cp.lpData.Split(stringSeparators, StringSplitOptions.None)[0] != oldTrack)
        //        {
        //            oldTrack = cp.lpData.Split(stringSeparators, StringSplitOptions.None)[0];
        //            TagLib.File file = TagLib.File.Create(oldTrack);
        //            xTitle = file.Tag.Title;
        //            xArtist = file.Tag.FirstPerformer;
        //            xTrack = file.Tag.Track.ToString();
        //            xLength = file.Properties.Duration.Seconds;
        //            xAlbum = file.Tag.Album;
        //        }


        //        switch (playerstatus)
        //        {
        //            case "STATUS:playing":
        //                playingmusic = true;
        //                break;
        //            case "STATUS:paused":
        //                playingmusic = false;

        //                break;
        //            case "STATUS:not_playing":
        //                playingmusic = false;
        //                break;
        //            default:
        //                playingmusic = false;
        //                break;
        //        }

        //        if (playingmusic)
        //        {
        //            tif = new TuneInformation(xTitle, xArtist, xTrack, xLength, 0, xAlbum, null);
        //            XCD.myTune = tif;
        //            XCD.TuneText = xArtist + " - " + xTitle;
        //        }
        //        else {
        //            tif = new TuneInformation(null, null, null, 0, 0, null, null);
        //            XCD.myTune = tif;
        //            XCD.TuneText = "Not Playing any music!";
        //        }

        //        if (XC.Connected) { XC.SetTune(tif); }

        //    }

        //    return IntPtr.Zero;
        //}


        //private void XC_SubscriptionRefused(object sender, SubscriptionRefusedEventArgs e)
        //{

        //    //MessageBox.Show("Refused");
        //}

        //private void XC_SubscriptionApproved(object sender, SubscriptionApprovedEventArgs e)
        //{
        //    //MessageBox.Show("Approved");
        //}

        //bool OnSubscriptionRequest(Jid from)
        //{
        //    bool temp = false;

        //    this.Dispatcher.Invoke((Action)(() =>
        //    {
        //        OF_SR_Window OFSRW = new OF_SR_Window(from + " wants to subscribe to your presence.");
        //        OFSRW.ShowDialog();
        //        if (OFSRW.DialogResult.HasValue && OFSRW.DialogResult.Value)
        //        {
        //            XC.Im.ApproveSubscriptionRequest(from);
        //            temp = true;
        //        }
        //        else
        //        {
        //            XC.Im.RefuseSubscriptionRequest(from);
        //            temp = false;
        //        }
        //    }));

        //    return temp;

        //}



        // private void XC_DirectMucInvitationReceived(object sender, DirectMucInvitation e)
        // {
        //      Task<JoinRoomResult> JRR = XC.JoinRoom(e.RoomJid, e.RoomJid.GetBareJid().ToString().Replace("@conference." + XC.Im.Jid.Domain, ""));

        //     MessageBox.Show(JRR.Status.ToString());
        //  }
        
  
    public void Connect() {

             
           


        }

 
        ///// <summary>
        ///// Connect using parameters provided in the constructor
        ///// </summary>
        //public void Connect()
        //{
        //    //Connects using the Resource name. The catch block will raise appropriate high level error codes
        //    try
        //    {

        //        XC.Connect(_resource); //Its not async, so we are waiting to return
        //                               //Set Status with Presence Online and Priority -1
        //        XC.SetStatus(Availability.Online, null, 1);


        //        if (XC.Connected)
        //        {
        //            //Starts the ping timer and the exceptions bind to the timer that notify the higher level

        //            _pingTimer = new Timer((o) =>
        //            {
        //                PingServer();
        //            }, null, _pingPeriod, _pingPeriod);
        //            //Starts a timer for pinging the server over time


        //            _WinampWindow = Win32.FindWindow(WINAMP_TITLE, null);

        //            Win32.SendMessage(_WinampWindow, Win32.IPC_OF_GET, 0, 0);


        //            thread_xmpp_load.SmartStart(xmpp_load);



        //            SetLoginSCV(Visibility.Hidden);

        //        }
        //    } //Catch block of the connection command
        //    catch (System.Security.Authentication.AuthenticationException e)
        //    {
        //        Dispose(true);

        //        SetXMPPSTATUS("Auth Exception, Authenication failed: " + e.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //    catch (System.IO.IOException e)
        //    {

        //        Dispose(true);
        //        SetXMPPSTATUS("Net Exception: " + e.Message);
        //        thread_xmpp_connect.Abort();

        //    }
        //    catch (XmppException e)
        //    {
        //        Dispose(true);

        //        SetXMPPSTATUS("XML Exception: " + e.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //    catch (Exception e)
        //    {
        //        Dispose(true);

        //        SetXMPPSTATUS("XML Exception: " + e.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //}

        //private void Dispose(bool recreate = false)
        //{
        //    this.Dispatcher.Invoke((Action)(() =>
        //    {
        //        OF_Login.IsEnabled = true;

        //        if (_pingTimer != null) _pingTimer.Dispose();
        //        _pingTimer = null;

        //        try
        //        {
        //            XC.Close();
        //        }
        //        catch (Exception e)
        //        {

        //        }


        //        BuddiesList.Clear();
        //        if (recreate == true) { CreateXMPP(); }
        //    }));

        //    SetLoginSCV(Visibility.Visible);
        //}
        ///// <summary>
        ///// Pings one time to the XMPP server and
        ///// an appropriate error event is raised if disconnected
        ///// </summary>
        //public void PingServer()
        //{
        //    try
        //    {
        //        var t = XC.Ping(XCD.Jid); //Pings the server
        //                                  //uiDispatcher.multiDebug("Time to ping was " + t.Seconds.ToString());


        //    }
        //    catch (XmppDisconnectionException ex)
        //    {

        //    }
        //    catch (InvalidOperationException ex)
        //    {
        //        Dispose(true);
        //        SetXMPPSTATUS("Error Pinging, not connected to server: " + ex.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //    catch (NotSupportedException ex)
        //    {
        //        Dispose(true);
        //        SetXMPPSTATUS("Error Pinging, not supported by server: " + ex.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //    catch (IOException ex)
        //    {
        //        Dispose(true);
        //        SetXMPPSTATUS("Error Pinging, IO exception: " + ex.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //    catch (XmppException ex)
        //    {
        //        Dispose(true);
        //        SetXMPPSTATUS("Error Pinging, Generic Exception: " + ex.Message);
        //        thread_xmpp_connect.Abort();
        //    }
        //}


        //public bool PingServerBool()
        //{


        //    try
        //    {
        //        var t = XC.Ping(XCD.Jid); //Pings the server

        //        //uiDispatcher.multiDebug("Time to ping was " + t.Seconds.ToString());
        //    }
        //    catch (XmppDisconnectionException ex)
        //    {
        //        return false;
        //    }
        //    catch (InvalidOperationException ex)
        //    {
        //        return false;
        //    }
        //    catch (NotSupportedException ex)
        //    {
        //        return false;
        //    }
        //    catch (IOException ex)
        //    {
        //        return false;
        //    }
        //    catch (XmppException ex)
        //    {
        //        return false;
        //    }
        //    return true;
        //}

        //// private void XC_AvatarChanged(object sender, Sharp.Xmpp.Extensions.AvatarChangedEventArgs e)
        ////{
        ////   MessageBox.Show("Avatar: " + e.Jid.GetBareJid().ToString());
        ////}

        //private void AllChats_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        //{

        //}

        //private void XC_StatusChanged(object sender, Sharp.Xmpp.Im.StatusEventArgs e)
        //{
        //    if (e.Jid.GetBareJid() == XCD.Jid.GetBareJid())
        //    {
        //        XCD.Status = e.Status.Availability.ToString();
        //        XCD.StatusMessage = e.Status.Message;
        //    }
        //    else
        //    {

        //        this.Dispatcher.Invoke((Action)(() =>
        //        {
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).Status = e.Status.Availability.ToString();
        //            string st = "...";
        //            if (!e.Status.Message.IsNullOrEmpty())
        //            {
        //                st = e.Status.Message;
        //            }
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).StatusMessage = st ;
        //        }));
        //    }

        //   // MessageBox.Show(e.Jid.GetBareJid() + Environment.NewLine + e.Status.Availability.ToString() + Environment.NewLine + "<" + e.Status.Message + ">");

        //}

        //private void XC_Status(object sender, StatusEventArgs e)
        //{
        //    if (e.Jid.GetBareJid() == XCD.Jid.GetBareJid())
        //    {
        //        XCD.Status = e.Status.Availability.ToString();
        //        XCD.StatusMessage = e.Status.Message;
        //    }
        //    else
        //    {

        //        this.Dispatcher.Invoke((Action)(() =>
        //        {
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).Status = e.Status.Availability.ToString();
        //            string st = "...";
        //            if (!e.Status.Message.IsNullOrEmpty())
        //            {
        //                st = e.Status.Message;
        //            }
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).StatusMessage = st;
        //        }));
        //    }
        //    //MessageBox.Show(e.Jid.GetBareJid() + Environment.NewLine + e.Status.Availability.ToString() + Environment.NewLine + "<" + e.Status.Message + ">");
        //}
        //private void XC_MoodChanged(object sender, Sharp.Xmpp.Extensions.MoodChangedEventArgs e)
        //{
        //    this.Dispatcher.Invoke((Action)(() =>
        //    {
        //        MessageBox.Show("MoodChanged: " + e.Jid.ToString());
        //    }));
        //}

        //private void XC_RosterUpdated(object sender, Sharp.Xmpp.Im.RosterUpdatedEventArgs e)
        //{
        //    if (e.Removed == true)
        //    {
        //        BuddiesList.Remove(BuddiesList.Single(j => j.Jid.GetBareJid() == e.Item.Jid.GetBareJid()));
        //    }
        //    else
        //    {
        //        Xmpp.BuddiesData VC = new Xmpp.BuddiesData();
        //        VC.Name = "Loading...";
        //        VC.Jid = e.Item.Jid;

        //        VC.Pending = e.Item.Pending;
        //        VC.SubscriptionState = e.Item.SubscriptionState.ToString();

        //        if (!BuddiesContains(e.Item.Jid)) { BuddiesList.Add(VC); }


        //        XC.GetvCard(e.Item.Jid.ToString(), Callback);
        //    }

        //}

        //public bool BuddiesContains(Jid j)
        //{
        //    bool temp = false;
        //    foreach (Xmpp.BuddiesData d in BuddiesList)
        //    {
        //        if (d.Jid.GetBareJid() == j.GetBareJid()) { temp = true; }
        //    }

        //    return temp;
        //}

        //private void XC_ActivityChanged(object sender, Sharp.Xmpp.Extensions.ActivityChangedEventArgs e)
        //{
        //    this.Dispatcher.Invoke((Action)(() =>
        //    {
        //        MessageBox.Show("ActivityChanged: " + e.Jid.ToString());
        //    }));
        //}

        private void xmpp_load()
        {
            //try
            //{
            //    XCD.Jid = XC.Jid;
            //    XC.GetvCard(XCD.Jid.GetBareJid().ToString(), Callback);

            //    foreach (Sharp.Xmpp.Im.RosterItem item in XC.GetRoster())
            //    {
            //        this.Dispatcher.Invoke((Action)(() =>
            //        {
            //            Xmpp.BuddiesData VC = new Xmpp.BuddiesData();
            //            VC.Name = "Loading...";
            //            VC.Jid = item.Jid;
            //            VC.Pending = item.Pending;
            //            VC.SubscriptionState = item.SubscriptionState.ToString();


            //            if (!BuddiesList.Contains(VC)) { BuddiesList.Add(VC); }


            //        }));
            //    }

            //    foreach (Sharp.Xmpp.Im.RosterItem item in XC.GetRoster())
            //    {

            //        //XC.GetvCardAvatar(item.Jid.ToString(), Environment.CurrentDirectory + @"\avatars\" + item.Jid.GetBareJid().ToString().Split('@')[0] + ".png", Callback);
            //        //XC.GetvCardAvatar(item.Jid.ToString(), Callback);

            //        XC.GetvCard(item.Jid.ToString(), Callback);

            //    }

            //    XC.SetStatus(GetFromInt(iSettings.Status), iSettings.StatusMessage, 1);
            //}
            //catch (Exception ex) { MessageBox.Show(ex.Message); }

            //this.Dispatcher.Invoke((Action)(() =>
            //{
            //    foreach (Jid MucService in XC.GetMucServices())
            //    {
            //        if (MucService.ToString().Contains("conference."))
            //        {
            //            foreach (XmppItem Room in XC.GetRooms(MucService))
            //            {
            //                Xmpp.GroupChatData GCD = new Xmpp.GroupChatData();
            //                GCD.Name = Room.Name;
            //                GCD.Jid = Room.Jid;
            //                AllGroupChats.Add(GCD);

            //            }
            //        }
            //    }
            //}));

        }


        //private void Callback(Sharp.Xmpp.Extensions.VCardsData vcard, Sharp.Xmpp.Jid Jz)
        //{
        //    this.Dispatcher.Invoke((Action)(() =>
        //    {
        //        if (Jz.GetBareJid() == XCD.Jid.GetBareJid())
        //        {
        //            XCD.Avatar = BitmapImageExtensions.ByteToBitmap(vcard.Avatar);
        //            XCD.Name = vcard.NickName;

        //        }
        //        else
        //        {
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == Jz.GetBareJid()).Avatar = BitmapImageExtensions.ByteToBitmap(vcard.Avatar);
        //            BuddiesList.Single(j => j.Jid.GetBareJid() == Jz.GetBareJid()).Name = vcard.NickName;

        //            XC.Ping(Jz);
        //        }
        //    }));
        //}

        //private void addchat(Sharp.Xmpp.Jid e, Xmpp.ChatMsg msg)
        //{
        //    if (!AllChats.Any(j => j.Jid == e))
        //    {
        //        Xmpp.ChatData XCD = new Xmpp.ChatData();
        //        XCD.Jid = e;

        //        XCD.Msgs.Add(msg);



        //        AllChats.Add(XCD);


        //    }
        //    else
        //    {
        //        AllChats.Single(j => j.Jid == e).Msgs.Add(msg);
        //    }
        //}


        //private void XC_Message(object sender, Sharp.Xmpp.Im.MessageEventArgs e)
        //{
        //    if (e.Jid.ToString().Contains("@conference." + XC.Im.Jid.Domain) || e.Jid.ToString().Contains("@muc." + XC.Im.Jid.Domain))
        //    {
        //        Xmpp.ChatMsg msgss = new Xmpp.ChatMsg();

        //        msgss.Text = " " + e.Message.Body;
        //        msgss.Avatar = XCD.Avatar;
        //        msgss.AvatarColumn = 0;
        //        msgss.TextColumn = 1;
        //        msgss.TextHA = HorizontalAlignment.Left;
        //        addchat(e.Jid, msgss);

        //        this.Dispatcher.InvokeAsync((Action)(() =>
        //        {
        //            OF_GroupChatWindow OFGCW;
        //            if (!Application.Current.Windows.OfType<OF_GroupChatWindow>().Any(x => x.C_jid2.GetBareJid() == e.Jid.GetBareJid()))
        //            {
        //                OFGCW = new OF_GroupChatWindow(AllChats, e.Jid.GetBareJid());
        //                OFGCW.Tag = e.Jid.GetBareJid();
        //                OFGCW.OF_Send.Click += SendMucButton_Click;
        //                OFGCW.OF_Msg.KeyDown += MsgMucBox_KeyDown;
        //                OFGCW.Show();
        //            }
        //            else {
        //                OFGCW = Application.Current.Windows.OfType<OF_GroupChatWindow>().Single(x => ((Sharp.Xmpp.Jid)x.Tag).GetBareJid() == e.Jid.GetBareJid());

        //            }

        //            OFGCW.OF_Chat.ItemsSource = AllChats.Single(j => j.Jid.ToString().Contains(e.Jid.GetBareJid().ToString())).Msgs;
        //            OFGCW.OF_Chat.Items.Refresh();
        //        }));
        //    }
        //    else
        //    {
        //        Xmpp.ChatMsg msgss = new Xmpp.ChatMsg();

        //        msgss.Text = " " + e.Message.Body;
        //        msgss.Avatar = BuddiesList.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).Avatar;
        //        msgss.AvatarColumn = 0;
        //        msgss.TextColumn = 1;
        //        msgss.TextHA = HorizontalAlignment.Left;
        //        addchat(e.Jid.GetBareJid(), msgss);


        //        this.Dispatcher.InvokeAsync((Action)(() =>
        //        {
        //            if (!Application.Current.Windows.OfType<OF_ChatWindow>().Any(x => x.C_jid2.GetBareJid() == e.Jid.GetBareJid()))
        //            {
        //                OF_ChatWindow CW = new OF_ChatWindow(AllChats, e.Jid.GetBareJid());
        //                CW.Tag = e.Jid.GetBareJid();
        //                CW.Show();
        //                CW.OF_SendButton.Click += SendButton_Click;

        //                CW.OF_MsgBox.KeyDown += MsgBox_KeyDown;
        //                CW.OF_ChatBox.ItemsSource = AllChats.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).Msgs;
        //                CW.OF_ChatBox.Items.Refresh();

        //            }
        //            else {
        //                OF_ChatWindow CW = Application.Current.Windows.OfType<OF_ChatWindow>().Single(x => ((Sharp.Xmpp.Jid)x.Tag).GetBareJid() == e.Jid.GetBareJid());
        //                CW.OF_ChatBox.ItemsSource = AllChats.Single(j => j.Jid.GetBareJid() == e.Jid.GetBareJid()).Msgs;
        //                CW.OF_ChatBox.Items.Refresh();

        //            }
        //        }));
        //    }

        //}


        //public void sendChat(Sharp.Xmpp.Jid D)
        //{
        //    OF_ChatWindow CW = Application.Current.Windows.OfType<OF_ChatWindow>().Single(x => ((Sharp.Xmpp.Jid)x.Tag).GetBareJid() == D.GetBareJid());
        //    if (!string.IsNullOrEmpty(CW.OF_MsgBox.Text))
        //    {
        //        Xmpp.ChatMsg msgss = new Xmpp.ChatMsg();
        //        msgss.AvatarColumn = 2;
        //        msgss.TextColumn = 1;
        //        msgss.TextHA = HorizontalAlignment.Left;
        //        msgss.Name = XCD.Name + ": ";
        //        msgss.Text = " " + CW.OF_MsgBox.Text;
        //        msgss.Avatar = XCD.Avatar;

        //        XC.SendMessage(D.GetBareJid(), CW.OF_MsgBox.Text);
        //        addchat(D.GetBareJid(), msgss);
        //        CW.OF_ChatBox.ItemsSource = AllChats.Single(j => j.Jid.GetBareJid() == D.GetBareJid()).Msgs;
        //        CW.OF_ChatBox.Items.Refresh();
        //        CW.OF_MsgBox.Text = "";
        //    }
        //}

        //public void sendMucChat(Sharp.Xmpp.Jid D)
        //{
        //    OF_GroupChatWindow OFGCW2 = Application.Current.Windows.OfType<OF_GroupChatWindow>().Single(x => ((Sharp.Xmpp.Jid)x.Tag).GetBareJid() == D.GetBareJid());
        //    //  OF_ChatWindow CW = Application.Current.Windows.OfType<OF_ChatWindow>().Single(x => ((Sharp.Xmpp.Jid)x.Tag).GetBareJid() == D.GetBareJid());
        //    if (!string.IsNullOrEmpty(OFGCW2.OF_Msg.Text))
        //    {
        //        Xmpp.ChatMsg msgss = new Xmpp.ChatMsg();
        //        msgss.AvatarColumn = 2;
        //        msgss.TextColumn = 1;
        //        msgss.TextHA = HorizontalAlignment.Left;
        //        msgss.Name = XCD.Name + ": ";
        //        msgss.Text = " " + OFGCW2.OF_Msg.Text;
        //        msgss.Avatar = XCD.Avatar;

        //        XC.SendMessage(D, OFGCW2.OF_Msg.Text, null, null, MessageType.Groupchat);
        //        addchat(D, msgss);
        //        // OFGCW.OF_Chat.ItemsSource = AllChats.Single(j => j.Jid.ToString().Contains(D.GetBareJid().ToString())).Msgs; //AllChats.Single(j => j.Jid.GetBareJid() == D.GetBareJid()).Msgs;
        //        OFGCW2.OF_Chat.Items.Refresh();
        //        OFGCW2.OF_Msg.Text = "";
        //    }
        //}

        private void MsgBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                TextBox D = (TextBox)sender;
              //  sendChat(((Sharp.Xmpp.Jid)D.Tag).GetBareJid());

            }
        }



        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            Button D = (Button)sender;
          //  sendChat(((Sharp.Xmpp.Jid)D.Tag).GetBareJid());
        }

        private void MsgMucBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                TextBox D = (TextBox)sender;
              //  sendMucChat(((Sharp.Xmpp.Jid)D.Tag).GetBareJid());
            }
        }

        private void SendMucButton_Click(object sender, RoutedEventArgs e)
        {
            Button D = (Button)sender;
           // sendMucChat(((Sharp.Xmpp.Jid)D.Tag).GetBareJid());
        }

        //public void CloseAll()
        //{
        //    xClosing();

        //    if (_pingTimer != null) _pingTimer.Dispose();
        //    _pingTimer = null;
        //    try
        //    {
        //        XC.Close();
        //    }
        //    catch (Exception e)
        //    {

        //    }

        //    this.Close();
        //}

        private void ExitApp(object sender, RoutedEventArgs e)
        {
          //  CloseAll();
        }

        private void OpenSettings(object sender, RoutedEventArgs e)
        {
            OF_SettingsWindow Set = new OF_SettingsWindow();
            Set.ShowDialog();
        }

        private void CH(object sender, EventArgs e)
        {
            //OF_ChatWindow Set = new OF_ChatWindow();
            //Set.ShowDialog();
        }

        private void icon_Click(Object sender, EventArgs e)
        {

        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
           // HwndSource src = HwndSource.FromHwnd(new WindowInteropHelper(this).Handle);
           // src.AddHook(new HwndSourceHook(WndProc));
            //LeftToRightMarquee(OF_StatusCanvas, OF_StatusText);
           // LeftToRightMarquee(OF_TuneCanvas, OF_TuneText);
        }



        private void OF_FriendsList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {

            if (OF_FriendsList.SelectedItem != null)
            {
                Xmpp.BuddiesData BD = (Xmpp.BuddiesData)OF_FriendsList.SelectedItem;


                this.Dispatcher.Invoke((Action)(() =>
                {
                    if (!Application.Current.Windows.OfType<OF_ChatWindow>().Any(x => x.C_jid2 == BD.Jid))
                    {
                        OF_ChatWindow CW = new OF_ChatWindow(AllChats, BD.Jid);
                        CW.Tag = BD.Jid;

                        CW.Show();
                        CW.OF_SendButton.Click += SendButton_Click;
                        CW.OF_MsgBox.KeyDown += MsgBox_KeyDown;
                        try
                        { CW.OF_ChatBox.ItemsSource = AllChats.Single(j => j.Jid.GetBareJid() == BD.Jid.GetBareJid()).Msgs; }
                        catch (Exception eex) { }

                        CW.OF_ChatBox.Items.Refresh();
                    }
                }));
            }
        }

        //public void SetStatus()
        //{
        //    ComboBoxItem s = (ComboBoxItem)OF_Status.SelectedItem;
        //    if (XC.Connected)
        //    {
        //        XC.SetStatus(GetFromString(s.Content.ToString()), OF_StatusText.Text, 1);
        //    }
        //}
        //public Availability GetFromString(string avb)
        //{
        //    Availability temp = Availability.Online;

        //    if (avb == "Online") { temp = Availability.Online; }
        //    if (avb == "Away") { temp = Availability.Away; }
        //    if (avb == "Chat") { temp = Availability.Chat; }
        //    if (avb == "Dnd") { temp = Availability.Dnd; }
        //    if (avb == "Xa") { temp = Availability.Xa; }

        //    return temp;
        //}
        //public Availability GetFromInt(int avb)
        //{
        //    Availability temp = Availability.Online;

        //    if (avb == 1) { temp = Availability.Online; }
        //    if (avb == 2) { temp = Availability.Away; }
        //    if (avb == 3) { temp = Availability.Chat; }
        //    if (avb == 4) { temp = Availability.Dnd; }
        //    if (avb == 5) { temp = Availability.Xa; }

        //    return temp;
        //}
        private void OF_FriendsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void OF_Status_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            iSettings.SaveSetting();
           // SetStatus();
        }

        private void OF_StatusText_LostFocus(object sender, RoutedEventArgs e)
        {
            iSettings.SaveSetting();
           // SetStatus();
        }

        private List<string> JoinedMuc = new List<string>();

        private void OF_GroupsList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //if (OF_GroupsList.SelectedItem != null)
            //{
            //    Xmpp.GroupChatData GCD = (Xmpp.GroupChatData)OF_GroupsList.SelectedItem;
            //    // GCD.Jid.GetBareJid().ToString().Replace("@conference.localhost", "") 
            //    if (!JoinedMuc.Contains(GCD.Jid.ToString()))
            //    {
            //        Task<JoinRoomResult> rr = HandleClickAsync(GCD.Jid, GCD.Jid.GetBareJid().ToString().Replace("@conference." + XC.Im.Jid.Domain, ""));
            //        JoinedMuc.Add(GCD.Jid.ToString());
            //    }

            //    //Sharp.Xmpp.Extensions.Dataforms.RequestForm rf = XC.GetRoomConfiguration(GCD.Jid, GCD.Jid.GetBareJid().ToString().Replace("@conference.localhost", ""));
            //    //  MessageBox.Show(rf.ToString());

            //    this.Dispatcher.InvokeAsync((Action)(() =>
            //    {
            //        if (!Application.Current.Windows.OfType<OF_GroupChatWindow>().Any(x => x.C_jid2.GetBareJid() == GCD.Jid.GetBareJid()))
            //        {
            //            OF_GroupChatWindow OFGCW = new OF_GroupChatWindow(AllChats, GCD.Jid.GetBareJid());

            //            OFGCW.Tag = GCD.Jid;
            //            OFGCW.OF_Send.Click += SendMucButton_Click;
            //            OFGCW.OF_Msg.KeyDown += MsgMucBox_KeyDown;
            //            OFGCW.Show();
            //            try
            //            { OFGCW.OF_Chat.ItemsSource = AllChats.Single(j => j.Jid.ToString().Contains(GCD.Jid.GetBareJid().ToString())).Msgs; }
            //            catch (Exception eex) { }

            //            OFGCW.OF_Chat.Items.Refresh();
            //        }
            //    }));
            //}
        }

        //private async Task<JoinRoomResult> HandleClickAsync(Jid mc, string name)
        //{
        //    return await XC.JoinRoom(mc, name);

        //}

        private void OF_Menu_Options_Settings_Click(object sender, RoutedEventArgs e)
        {
            OF_SettingsWindow Set = new OF_SettingsWindow();
            Set.ShowDialog();
        }

        private void OF_Menu_File_LogOut_Click(object sender, RoutedEventArgs e)
        {
           // Dispose(true);
            //  SetXMPPSTATUS("Disconnected from server");
           // thread_xmpp_connect.Abort();
        }

        private void OF_MenuList_Remove_Friend_Click(object sender, RoutedEventArgs e)
        {
            MenuItem MI = (MenuItem)sender;
           // Yaaf.Xmpp.Runtime.Features.BindElement.Jid J = (Yaaf.Xmpp.Runtime.Features.BindElement.Jid)MI.Tag;
          //  XC.RemoveContact(J);
        }

        private void OF_Menu_Add_Friend_Click(object sender, RoutedEventArgs e)
        {
            OF_AddFriendWindow OFAFW = new OF_AddFriendWindow();
            OFAFW.ShowDialog();
            string[] groups = new string[] { "Buddies" };
            if (OFAFW.DialogResult.HasValue && OFAFW.DialogResult.Value)
            {
               // XC.AddContact(new Jid(OFAFW.OF_Name_TextBox.Text + "@" + XC.Im.Jid.Domain), null, groups);
            }
            else
            {


            }

        }

        private void OF_MenuList_Accept_Friend_Click(object sender, RoutedEventArgs e)
        {
            MenuItem MI = (MenuItem)sender;
           // Yaaf.Xmpp.Runtime.Features.BindElement.Jid J = (Yaaf.Xmpp.Runtime.Features.BindElement.Jid)MI.Tag;
          //  XC.Im.ApproveSubscriptionRequest(J);
        }

        private void OF_Menu_Help_About_Click(object sender, RoutedEventArgs e)
        {
            About about = new About();
            about.ApplicationLogo = (BitmapImage)Application.Current.FindResource("OpenFlareIcon");
            about.Show();
        }
        private void xClosing()
        {
            ///TuneInformation tif = new TuneInformation(null, null, null, 0, 0, null, null);
           // XCD.myTune = tif;
          //  XCD.TuneText = "Not Playing any music!";

           // if (XC.Connected) { XC.SetTune(tif); }
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            xClosing();
        }
        private void LeftToRightMarquee(Canvas tbc, TextBlock tb)
        {
            double height = tbc.ActualHeight - tb.ActualHeight;
            tb.Margin = new Thickness(0, height / 2, 0, 0);
            DoubleAnimation doubleAnimation = new DoubleAnimation();
            doubleAnimation.From = -tb.ActualWidth;
            doubleAnimation.To = tbc.ActualWidth;
            doubleAnimation.RepeatBehavior = RepeatBehavior.Forever;
            doubleAnimation.Duration = new Duration(TimeSpan.FromSeconds(10));
            tb.BeginAnimation(Canvas.LeftProperty, doubleAnimation);
        }

        private void RightToLeftMarquee(Canvas tbc, TextBlock tb)
        {
            double height = tbc.ActualHeight - tb.ActualHeight;
            tb.Margin = new Thickness(0, height / 2, 0, 0);
            DoubleAnimation doubleAnimation = new DoubleAnimation();
            doubleAnimation.From = -tb.ActualWidth;
            doubleAnimation.To = tbc.ActualWidth;
            doubleAnimation.RepeatBehavior = RepeatBehavior.Forever;
            doubleAnimation.Duration = new Duration(TimeSpan.FromSeconds(10));
            tb.BeginAnimation(Canvas.RightProperty, doubleAnimation);
        }

        private void OF_Login_Click(object sender, RoutedEventArgs e)
        {

            OF_Login.IsEnabled = false;
           thread_xmpp_connect.SmartStart(Connect);



            //thread_xmpp_load.Start();

        }

        private void OF_Password_PasswordChanged(object sender, RoutedEventArgs e)
        {
            iSettings.Password = OF_Password.SecurePassword;
            iSettings.SaveSetting();
        }

        private void OF_AutoLogin_Click(object sender, RoutedEventArgs e)
        {
            iSettings.SaveSetting();
        }

        private void OF_UserName_TextChanged(object sender, TextChangedEventArgs e)
        {
            iSettings.SaveSetting();
        }






        

  
    }

}
